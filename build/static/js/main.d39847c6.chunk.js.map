{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["client","ApolloClient","uri","NewUserForm","_ref","newUser","updateNewUser","submitNewUser","react_default","a","createElement","className","onSubmit","type","placeholder","name","value","userName","onChange","required","email","firstName","lastName","password","UserTable","_ref2","users","length","keys","Object","slice","map","key","user","username","CheckBoxes","_ref3","handleCheck","defaultChecked","App","_useState","useState","_useState2","slicedToArray","setUsers","_useState3","_useState4","meWant","setMeWant","_useState5","_useState6","setNewUser","getAllUsers","ALL_USERS","gql","_templateObject","join","query","fetchPolicy","then","result","data","useEffect","react_apollo_esm","onClick","evt","preventDefault","resetU","_templateObject3","mutate","mutation","target","checked","push","filter","el","objectSpread","createUser","_templateObject2","variables","u","toConsumableArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d39847c6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport gql from \"graphql-tag\";\nimport { ApolloProvider } from \"react-apollo\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({ uri: `https://jackborg.dk/graphql/` });\n\nfunction App() {\n\tconst [users, setUsers] = useState([]);\n\tlet [meWant, setMeWant] = useState([\"_id\", \"username\", \"email\"]);\n\tconst [newUser, setNewUser] = useState({\n\t\tusername: \"\",\n\t\tfirstName: \"\",\n\t\tlastName: \"\",\n\t\temail: \"\",\n\t\tpassword: \"\"\n\t});\n\n\tfunction getAllUsers() {\n\t\tconst ALL_USERS = gql`\n        {\n            getAllUsers {\n                ${meWant.join(\" \")}\n            }\n        }\n        `;\n\n\t\tclient\n\t\t\t.query({\n\t\t\t\tquery: ALL_USERS,\n\t\t\t\tfetchPolicy: \"no-cache\"\n\t\t\t})\n\t\t\t.then((result) => setUsers(result.data.getAllUsers));\n\t}\n\n\tconst handleCheck = (evt) => {\n\t\tconst value = evt.target.value;\n\t\tif (evt.target.checked) {\n\t\t\tmeWant.push(value);\n\t\t} else {\n\t\t\tmeWant = meWant.filter((el) => el !== value);\n\t\t}\n\t\tsetMeWant(meWant);\n\t\tgetAllUsers();\n\t};\n\n\tconst updateNewUser = (evt) => {\n\t\tconst name = evt.target.name;\n\t\tconst value = evt.target.value;\n\n\t\tnewUser[name] = value;\n\t\tsetNewUser({ ...newUser });\n\t};\n\n\tconst submitNewUser = (evt) => {\n\t\tevt.preventDefault();\n\t\tconst createUser = gql`\n\t\t\tmutation($user: UserInput!) {\n\t\t\t\tcreateUser(input: $user){\n                    ${meWant.join(\" \")}\n                }\n\t\t\t}\n\t\t`;\n\t\tclient.mutate({ mutation: createUser, variables: { user: newUser } }).then((result) => {\n\t\t\tlet u = result.data.createUser;\n\t\t\tusers.push(u);\n\t\t\tsetUsers([...users]);\n\t\t});\n\t};\n\n\tconst resetUsers = (evt) => {\n\t\tevt.preventDefault();\n\t\tconst resetU = gql`\n\t\t\tmutation {\n\t\t\t\tresetUsers\n\t\t\t}\n\t\t`;\n\t\tclient.mutate({ mutation: resetU }).then(getAllUsers());\n\t};\n\n\tuseEffect(() => getAllUsers());\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<UserTable users={users} />\n\t\t\t</ApolloProvider>\n\t\t\t<hr />\n\t\t\t<button className=\"btn btn-danger\" onClick={resetUsers}>\n\t\t\t\tReset users\n\t\t\t</button>\n\t\t\t<hr />\n\t\t\t<CheckBoxes handleCheck={handleCheck} />\n\t\t\t<hr />\n\t\t\t<NewUserForm\n\t\t\t\tnewUser={newUser}\n\t\t\t\tupdateNewUser={updateNewUser}\n\t\t\t\tsubmitNewUser={submitNewUser}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nfunction NewUserForm({ newUser, updateNewUser, submitNewUser }) {\n\treturn (\n\t\t<form className=\"row\" onSubmit={submitNewUser}>\n\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"Enter username\"\n\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\tvalue={newUser.userName}\n\t\t\t\t\t\tonChange={updateNewUser}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label>Email address</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"Enter email\"\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\tvalue={newUser.email}\n\t\t\t\t\t\tonChange={updateNewUser}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label>Firstname</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"Enter firstname\"\n\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\tvalue={newUser.firstName}\n\t\t\t\t\t\tonChange={updateNewUser}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label>Lastname</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"test\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"Enter lastname\"\n\t\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\t\tvalue={newUser.lastName}\n\t\t\t\t\t\tonChange={updateNewUser}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tvalue={newUser.password}\n\t\t\t\t\t\tonChange={updateNewUser}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t);\n}\n\nfunction UserTable({ users }) {\n\tif (users.length === 0) return <p>no data yet</p>;\n\tconst keys = Object.keys(users[0]).slice(0, -1);\n\n\treturn (\n\t\t<table className=\"table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t{keys.map((key) => (\n\t\t\t\t\t\t<th key={key}>{key}</th>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{users.map((user) => (\n\t\t\t\t\t<tr key={user.username}>\n\t\t\t\t\t\t{Object.keys(user)\n\t\t\t\t\t\t\t.slice(0, -1)\n\t\t\t\t\t\t\t.map((key) => (\n\t\t\t\t\t\t\t\t<td key={key}>{user[key]}</td>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nfunction CheckBoxes({ handleCheck }) {\n\treturn (\n\t\t<div>\n\t\t\t<label>\n\t\t\t\tusername\n\t\t\t\t<input type=\"checkbox\" value=\"username\" onChange={handleCheck} defaultChecked />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tfirstName\n\t\t\t\t<input type=\"checkbox\" value=\"firstName\" onChange={handleCheck} />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tlastName\n\t\t\t\t<input type=\"checkbox\" value=\"lastName\" onChange={handleCheck} />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\temail\n\t\t\t\t<input type=\"checkbox\" value=\"email\" onChange={handleCheck} defaultChecked />\n\t\t\t</label>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}